screening_index_smoking
#screening for non-smoking group
data_vessel_nsmoker<-data_vessel[,index_data$smoke==0]
index_data_nsmoker<-index_data[index_data$smoke==0,]
screening_index_nsmoking<-spearman_screen(index_data=index_data_nsmoker,data_vessel=data_vessel_nsmoker)
screening_index_nsmoking
#do smoking group
test_screen<-function(data_vessel,group,covariate){
Y<-data_vessel
sig_all<-NULL
for(i in 1:nrow(Y))
{
outcome_i<-as.vector(as.matrix(Y[i,]))
#gam_fit<-glm(outcome_i~index_data$hyper+index_data$smoke+index_data$sex+as.numeric(index_data$height)+as.numeric(index_data$bmi))
gam_fit<-glm(outcome_i~group+covariate)
sum_stat<-summary(gam_fit)
sig_all_i<-sum_stat$coefficients[2,4]
sig_all<-c(sig_all,sig_all_i)
}
sig_all_adjust<-p.adjust(sig_all,method = "hochberg")
sig_all_index<-which(sig_all_adjust<=0.05)
return(sig_all_index)
}
sig_all_index<-test_screen(data_vessel,group=index_data$hyper,covariate=index_data$smoke)
sig_all_index<-test_screen(data_vessel,group=index_data$hyper,covariate=index_data$smoke)
length(sig_all_index)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '/Users/chixiang.chen/OneDrive - University of Maryland School of Medicine/phd_in_psu/research/Prof._Wu/Network/tissue/blood_vessel/')
#read the data
pheno_together<-read.csv("pheno_together.csv") # phenotype data
data_vessel<-read.csv("data_vessel.csv") # gene expression data
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '/Users/chixiang.chen/OneDrive - University of Maryland School of Medicine/phd_in_psu/research/Prof._Wu/Network/tissue/blood_vessel/')
#read the data
pheno_raw<-read.csv("pheno_used.csv")
SUBJID<-pheno_raw$SUBJID
#rearrange the data
pheno_used<-data.frame(MHHTN=pheno_raw$MHHTN,pheno_raw[,!(colnames(pheno_raw) %in% c("MHHTN","SUBJID"))])
head(pheno_used)
fit<-glm(MHHTN~AGE+HGHT+BMI+MHASTHMA+MHCOPD+MHHRTATT+MHHRTDIS+MHT1D+MHT2D+MHDRNKSTS+SEX,data=pheno_used,family = binomial(link = "logit"))
rate<-fitted(fit)
summary(rate)
pheno_subject_id<-substring(SUBJID,6,10)
pheno_together<-data.frame(cbind(pheno_subject_id,rate,pheno_used$MHSMKSTS,pheno_used$SEX,pheno_used$HGHT,pheno_used$BMI,pheno_used$MHHTN))
colnames(pheno_together)<-c("id","rate","smoke","sex","height","bmi","hyper")
head(pheno_together)
write.csv(pheno_together,"pheno_together.csv",row.names =F)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '/Users/chixiang.chen/OneDrive - University of Maryland School of Medicine/phd_in_psu/research/Prof._Wu/Network/tissue/blood_vessel/')
#read the data
pheno_together<-read.csv("pheno_together.csv") # phenotype data
data_vessel<-read.csv("data_vessel.csv") # gene expression data
rownames(data_vessel)<-data_vessel[,1]
data_vessel<-data_vessel[,-1]
dim(data_vessel)
#delete gene with all zeros
row_mean<-apply(data_vessel,1, mean)
#delete gene with all zeros
row_mean<-apply(data_vessel,1, mean)
data_vessel<-data_vessel[row_mean>0,]
dim(data_vessel)
dim(data_vessel)
#let the gene expression equal to zero if it's less than 1 level:
data_vessel[data_vessel<=1]<-0
dim(data_vessel)
which(data_vessel<=1 & data_vessel>0)
#count zeros in each row:
zero_row<-apply(data_vessel,1,function (x) length(which(x==0)))
#count zeros in each row:
zero_row<-apply(data_vessel,1,function (x) length(which(x==0)))
summary(zero_row)
#do log transformation
data_vessel[data_vessel!=0]<-log(data_vessel[data_vessel!=0])
#do log transformation
data_vessel[data_vessel!=0]<-log(data_vessel[data_vessel!=0])
dim(data_vessel)
#set threshold about zeros:
data_vessel<-data_vessel[zero_row<=0,]
dim(data_vessel)
write.csv(data_vessel,"data_vessel_processed.csv",row.names =F)
data_vessel<-read.csv("data_vessel_processed.csv") # read preprocessed gene expression data
vessel_subject_id<-substring(colnames(data_vessel),6,10)
vessel_subject_id<-ifelse(substring(vessel_subject_id,5,5)==".",substring(vessel_subject_id,1,4),substring(vessel_subject_id,1,5))
vessel_together<-data.frame(cbind(vessel_subject_id,1))
colnames(vessel_together)<-c("id","haha")
index_data<-merge(x=vessel_together,y=pheno_together,by.x="id",all.x=T,sort=F)
dim(index_data)
spearman_screen<-function(index_data=index_data_smoker,data_vessel=data_vessel_smoker)
{
index<-as.numeric(as.matrix(index_data$rate,ncol=1))
#order the data by the index:
exp_index<-index[order(index)]
X<-log(exp_index)
data_vessel_order<-data_vessel[,order(index)]
index_data<-index_data[order(index),]
dim(data_vessel_order)
Y<-data_vessel_order
##screening by spearman correlation (seperate screening based on smoking groups)
#do smoking group
x_original<-t(Y)
data_vessel_order_smoking<-data_vessel_order
exp_index_smoking<-exp_index
Y_smoking<-Y
p<-nrow(data_vessel_order_smoking)
n<-ncol(data_vessel_order_smoking)
y<-exp_index
x<-t(Y_smoking)
spearman<-rep()
for (i in 1:ncol(x))
{
spearman_i<-abs(cor(x=exp_index_smoking, y=x[,i], method = 'spearman'))
spearman<-c(spearman,spearman_i)
}
size<-40
sis_smoking<-cbind(spearman,1:p)
sis_smoking<-sis_smoking[order(sis_smoking[,1],decreasing = TRUE),2][1:size]
return(final_index=sis_smoking)
}
#screening for smoking group
data_vessel_smoker<-data_vessel[,index_data$smoke==1]
index_data_smoker<-index_data[index_data$smoke==1,]
screening_index_smoking<-spearman_screen(index_data=index_data_smoker,data_vessel=data_vessel_smoker)
screening_index_smoking
#screening for non-smoking group
data_vessel_nsmoker<-data_vessel[,index_data$smoke==0]
index_data_nsmoker<-index_data[index_data$smoke==0,]
screening_index_nsmoking<-spearman_screen(index_data=index_data_nsmoker,data_vessel=data_vessel_nsmoker)
screening_index_nsmoking
#do smoking group
test_screen<-function(data_vessel,group,covariate){
Y<-data_vessel
sig_all<-NULL
for(i in 1:nrow(Y))
{
outcome_i<-as.vector(as.matrix(Y[i,]))
#gam_fit<-glm(outcome_i~index_data$hyper+index_data$smoke+index_data$sex+as.numeric(index_data$height)+as.numeric(index_data$bmi))
gam_fit<-glm(outcome_i~group+covariate)
sum_stat<-summary(gam_fit)
sig_all_i<-sum_stat$coefficients[2,4]
sig_all<-c(sig_all,sig_all_i)
}
sig_all_adjust<-p.adjust(sig_all,method = "hochberg")
sig_all_index<-which(sig_all_adjust<=0.05)
return(sig_all_index)
}
sig_all_index<-test_screen(data_vessel,group=index_data$hyper,covariate=index_data$smoke)
sig_all_index<-test_screen(data_vessel,group=index_data$hyper,covariate=index_data$smoke)
length(sig_all_index)
#######################################
#useful functions in functional mapping
#######################################
#calculate P_ij in the paper
P_ij<-function (y_i,x_i,beta,sigma,omega)
{
beta_sigma<-rbind(beta,sigma)
whole<-omega*apply(beta_sigma,2,function (x) exp(-t(y_i-x_i%*%x[1:2])%*%(y_i-x_i%*%x[1:2])/2/x[3])/(sqrt(2*pi*x[3]))^(length(y_i))  )
#as.matrix(whole/sum(whole),ncol=1)
whole
}
#calcuate P matrix
P_matrix<-function (x) {
Y<-x
x_i<-cbind(1,X[!is.na(Y)])
y_i<-Y[!is.na(Y)]
p_ij_1<-P_ij(y_i,x_i,beta,sigma,omega)
p_ij_1
}
#calculate one part in mle
fct_A<-function (x)
{
Y<-x[-1]
P_j_i<-x[1]
x_i<-cbind(1,as.numeric(X[!is.na(Y)]))
y_i<-Y[!is.na(Y)]
t(P_j_i*t(y_i)%*%x_i)
}
#calculate another part in mle
fct_B<-function (x)
{
Y<-x[-1]
P_j_i<-x[1]
x_i<-cbind(1,as.numeric(X[!is.na(Y)]))
y_i<-Y[!is.na(Y)]
P_j_i*t(x_i)%*%x_i
}
#calculate sigma_square
fct_sigma<-function (x)
{
Y<-x[-1]
P_j_i<-x[1]
x_i<-cbind(1,as.numeric(X[!is.na(Y)]))
y_i<-Y[!is.na(Y)]
numerator<-P_j_i*t(y_i-x_i%*%beta_new[,j])%*%(y_i-x_i%*%beta_new[,j])
numerator
}
#recalculate the row mean
mean_nonzero<-function (x)
{
xx<-x[!is.na(x)]
mean(xx)
}
#read phenotype data
phenotype<-read.csv("phenotype.csv")
#phenotype[1:4,1:10]
name_pheno<-c("MHHTN","SUBJID","AGE","HGHT","BMI","MHASTHMA","MHCOPD","MHHRTATT","MHHRTDIS",
"MHT1D","MHT2D","MHSMKSTS","MHDRNKSTS","SEX")
pheno_used<-phenotype[,colnames(phenotype) %in% name_pheno]
pheno_used<-pheno_used[-which(pheno_used$SUBJID=="K-562"),]
dim(pheno_used)
summary(pheno_used)
pheno_used$MHDRNKSTS<-ifelse(pheno_used$MHDRNKSTS %in% "Yes",1,ifelse(pheno_used$MHDRNKSTS %in% "No",0,NA))
pheno_used$MHSMKSTS<-ifelse(pheno_used$MHSMKSTS %in% "Yes",1,ifelse(pheno_used$MHSMKSTS %in% "No",0,NA))
pheno_used$SEX<-pheno_used$SEX-1
for (i in 6:ncol(pheno_used))
{
pheno_used[pheno_used[,i]==99 & !is.na(pheno_used[,i]),i]<-NA
}
for (i in 2:ncol(pheno_used))
{
if (sum(is.na(pheno_used[,i]))!=0)
{
sample_used<-pheno_used[!is.na(pheno_used[,i]),i]
pheno_used[is.na(pheno_used[,i]),i]<-sample(sample_used,sum(is.na(pheno_used[,i])),replace = T)
}
}
fit<-glm(MHHTN~AGE+HGHT+BMI+MHASTHMA+MHCOPD+MHHRTATT+MHHRTDIS+
MHT1D+MHT2D+MHDRNKSTS+SEX,data=pheno_used,family = binomial(link = "logit"))
length(unique(fitted(fit)))
summary(fitted(fit))
plot(sort(fitted(fit)))
pheno_subject_id<-substring(pheno_used$SUBJID,6,10)
pheno_together<-data.frame(cbind(pheno_subject_id,fitted(fit),pheno_used$MHSMKSTS,pheno_used$SEX,pheno_used$HGHT,pheno_used$BMI,pheno_used$MHHTN))
colnames(pheno_together)<-c("id","rate","smoke","sex","height","bmi","hyper")
data_vessel<-read.csv("data_vessel_processed.csv") # read preprocessed gene expression data
vessel_subject_id<-substring(colnames(data_vessel),6,10)
vessel_subject_id<-ifelse(substring(vessel_subject_id,5,5)==".",substring(vessel_subject_id,1,4),substring(vessel_subject_id,1,5))
vessel_together<-data.frame(cbind(vessel_subject_id,1))
colnames(vessel_together)<-c("id","haha")
index_data<-merge(x=vessel_together,y=pheno_together,by.x="id",all.x=T,sort=F)
dim(index_data)
spearman_screen<-function(index_data=index_data_smoker,data_vessel=data_vessel_smoker)
{
index<-as.numeric(as.matrix(index_data$rate,ncol=1))
#order the data by the index:
exp_index<-index[order(index)]
X<-log(exp_index)
data_vessel_order<-data_vessel[,order(index)]
index_data<-index_data[order(index),]
dim(data_vessel_order)
Y<-data_vessel_order
##screening by spearman correlation (seperate screening based on smoking groups)
#do smoking group
x_original<-t(Y)
data_vessel_order_smoking<-data_vessel_order
exp_index_smoking<-exp_index
Y_smoking<-Y
p<-nrow(data_vessel_order_smoking)
n<-ncol(data_vessel_order_smoking)
y<-exp_index
x<-t(Y_smoking)
spearman<-rep()
for (i in 1:ncol(x))
{
spearman_i<-abs(cor(x=exp_index_smoking, y=x[,i], method = 'spearman'))
spearman<-c(spearman,spearman_i)
}
size<-40
sis_smoking<-cbind(spearman,1:p)
sis_smoking<-sis_smoking[order(sis_smoking[,1],decreasing = TRUE),2][1:size]
return(final_index=sis_smoking)
}
#screening for smoking group
data_vessel_smoker<-data_vessel[,index_data$smoke==1]
index_data_smoker<-index_data[index_data$smoke==1,]
screening_index_smoking<-spearman_screen(index_data=index_data_smoker,data_vessel=data_vessel_smoker)
screening_index_smoking
#screening for non-smoking group
data_vessel_nsmoker<-data_vessel[,index_data$smoke==0]
index_data_nsmoker<-index_data[index_data$smoke==0,]
screening_index_nsmoking<-spearman_screen(index_data=index_data_nsmoker,data_vessel=data_vessel_nsmoker)
screening_index_nsmoking
#do smoking group
test_screen<-function(data_vessel,group,covariate){
Y<-data_vessel
sig_all<-NULL
for(i in 1:nrow(Y))
{
outcome_i<-as.vector(as.matrix(Y[i,]))
#gam_fit<-glm(outcome_i~index_data$hyper+index_data$smoke+index_data$sex+as.numeric(index_data$height)+as.numeric(index_data$bmi))
gam_fit<-glm(outcome_i~group+covariate)
sum_stat<-summary(gam_fit)
sig_all_i<-sum_stat$coefficients[2,4]
sig_all<-c(sig_all,sig_all_i)
}
sig_all_adjust<-p.adjust(sig_all,method = "hochberg")
sig_all_index<-which(sig_all_adjust<=0.05)
return(sig_all_index)
}
sig_all_index<-test_screen(data_vessel,group=index_data$hyper,covariate=index_data$smoke)
length(sig_all_index)
#######################################
#useful functions in functional mapping
#######################################
#calculate P_ij in the paper
P_ij<-function (y_i,x_i,beta,sigma,omega)
{
beta_sigma<-rbind(beta,sigma)
whole<-omega*apply(beta_sigma,2,function (x) exp(-t(y_i-x_i%*%x[1:2])%*%(y_i-x_i%*%x[1:2])/2/x[3])/(sqrt(2*pi*x[3]))^(length(y_i))  )
#as.matrix(whole/sum(whole),ncol=1)
whole
}
#calcuate P matrix
P_matrix<-function (x) {
Y<-x
x_i<-cbind(1,X[!is.na(Y)])
y_i<-Y[!is.na(Y)]
p_ij_1<-P_ij(y_i,x_i,beta,sigma,omega)
p_ij_1
}
#calculate one part in mle
fct_A<-function (x)
{
Y<-x[-1]
P_j_i<-x[1]
x_i<-cbind(1,as.numeric(X[!is.na(Y)]))
y_i<-Y[!is.na(Y)]
t(P_j_i*t(y_i)%*%x_i)
}
#calculate another part in mle
fct_B<-function (x)
{
Y<-x[-1]
P_j_i<-x[1]
x_i<-cbind(1,as.numeric(X[!is.na(Y)]))
y_i<-Y[!is.na(Y)]
P_j_i*t(x_i)%*%x_i
}
#calculate sigma_square
fct_sigma<-function (x)
{
Y<-x[-1]
P_j_i<-x[1]
x_i<-cbind(1,as.numeric(X[!is.na(Y)]))
y_i<-Y[!is.na(Y)]
numerator<-P_j_i*t(y_i-x_i%*%beta_new[,j])%*%(y_i-x_i%*%beta_new[,j])
numerator
}
#recalculate the row mean
mean_nonzero<-function (x)
{
xx<-x[!is.na(x)]
mean(xx)
}
#read the data
data_vessel<-read.csv("data_vessel.csv")
head(data_vessel)
rownames(data_vessel)<-data_vessel[,1]
data_vessel<-data_vessel[,-1]
dim(data_vessel)
#delete gene with all zeros
row_mean<-apply(data_vessel,1, mean)
data_vessel<-data_vessel[row_mean>0,]
dim(data_vessel)
#let the gene expression equal to zero if it's less than 1 level:
#row_mean<-apply(data_111YS,1, function (x) sum(ifelse(x<1 & x>0,1,0)))
#summary(row_mean)
#data_111YS<-data_111YS[which(row_mean==0),]
data_vessel[data_vessel<=1]<-0
dim(data_vessel)
which(data_vessel<=1 & data_vessel>0)
#count zeros in each row:
zero_row<-apply(data_vessel,1,function (x) length(which(x==0)))
summary(zero_row)
#do log transformation
data_vessel[data_vessel!=0]<-log(data_vessel[data_vessel!=0])
dim(data_vessel)
#set threshold about zeros:
data_vessel<-data_vessel[zero_row<=0,]
dim(data_vessel)
zero_row_del<-apply(data_vessel,1,function (x) length(which(x==0)))
sum(zero_row_del)
#summary statistics for row means:
row_mean<-apply(data_vessel,1, mean)
summary(row_mean)
par(mfrow=c(1,1))
sum(row_mean>=8.2)/length(row_mean)
qqnorm(y=row_mean)
#read phenotype data
phenotype<-read.csv("phenotype.csv")
#phenotype[1:4,1:10]
name_pheno<-c("MHHTN","SUBJID","AGE","HGHT","BMI","MHASTHMA","MHCOPD","MHHRTATT","MHHRTDIS",
"MHT1D","MHT2D","MHSMKSTS","MHDRNKSTS","SEX")
pheno_used<-phenotype[,colnames(phenotype) %in% name_pheno]
pheno_used<-pheno_used[-which(pheno_used$SUBJID=="K-562"),]
dim(pheno_used)
summary(pheno_used)
pheno_used$MHDRNKSTS<-ifelse(pheno_used$MHDRNKSTS %in% "Yes",1,ifelse(pheno_used$MHDRNKSTS %in% "No",0,NA))
pheno_used$MHSMKSTS<-ifelse(pheno_used$MHSMKSTS %in% "Yes",1,ifelse(pheno_used$MHSMKSTS %in% "No",0,NA))
pheno_used$SEX<-pheno_used$SEX-1
for (i in 6:ncol(pheno_used))
{
pheno_used[pheno_used[,i]==99 & !is.na(pheno_used[,i]),i]<-NA
}
for (i in 2:ncol(pheno_used))
{
if (sum(is.na(pheno_used[,i]))!=0)
{
sample_used<-pheno_used[!is.na(pheno_used[,i]),i]
pheno_used[is.na(pheno_used[,i]),i]<-sample(sample_used,sum(is.na(pheno_used[,i])),replace = T)
}
}
fit<-glm(MHHTN~AGE+HGHT+BMI+MHASTHMA+MHCOPD+MHHRTATT+MHHRTDIS+
MHT1D+MHT2D+MHDRNKSTS+SEX,data=pheno_used,family = binomial(link = "logit"))
length(unique(fitted(fit)))
summary(fitted(fit))
plot(sort(fitted(fit)))
pheno_subject_id<-substring(pheno_used$SUBJID,6,10)
vessel_subject_id<-substring(colnames(data_vessel),6,10)
vessel_subject_id<-ifelse(substring(vessel_subject_id,5,5)==".",substring(vessel_subject_id,1,4),substring(vessel_subject_id,1,5))
pheno_together<-data.frame(cbind(pheno_subject_id,fitted(fit),pheno_used$MHSMKSTS,pheno_used$SEX,pheno_used$HGHT,pheno_used$BMI,pheno_used$MHHTN))
colnames(pheno_together)<-c("id","rate","smoke","sex","height","bmi","hyper")
vessel_together<-data.frame(cbind(vessel_subject_id,1))
colnames(vessel_together)<-c("id","haha")
index_data<-merge(x=vessel_together,y=pheno_together,by.x="id",all.x=T,sort=F)
index<-as.numeric(as.matrix(index_data$rate,ncol=1))
sort(diff(sort(index),lag=1))
#order the data by the index:
exp_index<-index[order(index)]
X<-log(exp_index)
data_vessel_order<-data_vessel[,order(index)]
index_data<-index_data[order(index),]
dim(data_vessel_order)
Y<-data_vessel_order
#Y<-data_15ER7_order[order_bind[1:nrow(data_15ER7_order),][,2],]
plot(x=exp_index,y=Y[600,])
################################################################
#select some significant genes (by sirs)
p<-nrow(data_vessel_order)
n<-ncol(data_vessel_order)
corr1<-rep()
oumiga<-matrix(0,n,p)
y<-exp_index
x<-t(Y)
for (jj in 1:n)
{}
##screening by spearman correlation (seperate screening based on smoking groups)
#do smoking group
x_original<-t(Y)
data_vessel_order_smoking<-data_vessel_order[,index_data$smoke==1]
exp_index_smoking<-exp_index[index_data$smoke==1]
Y_smoking<-Y[,index_data$smoke==1]
p<-nrow(data_vessel_order_smoking)
n<-ncol(data_vessel_order_smoking)
y<-exp_index[index_data$smoke==1]
x<-t(Y_smoking)
spearman<-rep()
for (i in 1:ncol(x))
{
spearman_i<-abs(cor(x=exp_index_smoking, y=x[,i], method = 'spearman'))
spearman<-c(spearman,spearman_i)
}
size<-40
sis_smoking<-cbind(spearman,1:p)
sis_smoking<-sis_smoking[order(sis_smoking[,1],decreasing = TRUE),2][1:size]
#do test
sig_smoking<-NULL
for(i in 1:ncol(x))
{
gam_fit<-gam(x[,i]~s(exp_index_smoking))
sum_stat<-summary(gam_fit)
sig_smoking_i<-sum_stat$s.table[,4]
sig_smoking<-c(sig_smoking,sig_smoking_i)
}
sig_smoking_adjust<-p.adjust(sig_smoking,method = "hochberg")
sig_smoking_index<-which(sig_smoking_adjust<=0.05)
sig_smoking_adjust[sis_smoking]
sum(sis_smoking %in% sig_smoking_index)
plot(x[,5030],exp_index_smoking)
#do non-smoking group
data_vessel_order_nonsmoking<-data_vessel_order[,index_data$smoke==0]
exp_index_nonsmoking<-exp_index[index_data$smoke==0]
Y_nonsmoking<-Y[,index_data$smoke==0]
p<-nrow(data_vessel_order_nonsmoking)
n<-ncol(data_vessel_order_nonsmoking)
y<-exp_index[index_data$smoke==0]
x<-t(Y_nonsmoking)
spearman<-rep()
for (i in 1:ncol(x))
{
spearman_i<-abs(cor(x=exp_index_nonsmoking, y=x[,i], method = 'spearman'))
spearman<-c(spearman,spearman_i)
}
size<-40
sis_nonsmoking<-cbind(spearman,1:p)
sis_nonsmoking<-sis_nonsmoking[order(sis_nonsmoking[,1],decreasing = TRUE),2][1:size]
#do overall check
#do test for genes vs index
sig_all<-NULL
for(i in 1:nrow(Y))
{
outcome_i<-as.vector(as.matrix(Y[i,]))
#gam_fit<-glm(outcome_i~index_data$hyper+index_data$smoke+index_data$sex+as.numeric(index_data$height)+as.numeric(index_data$bmi))
gam_fit<-glm(outcome_i~index_data$hyper+index_data$smoke)
sum_stat<-summary(gam_fit)
sig_all_i<-sum_stat$coefficients[2,4]
sig_all<-c(sig_all,sig_all_i)
}
sig_all_adjust<-p.adjust(sig_all,method = "hochberg")
sig_all_index<-which(sig_all_adjust<=0.05)
length(sig_all_index)
index_utilized<-unique(c(sis_smoking,sis_nonsmoking,sig_all_index))
index_utilized
