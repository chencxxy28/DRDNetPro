#set.seed(41414343)
net.bg<-net
set.seed(4151320)
l<-layout_nicely(net.bg)
l <- layout.norm(l, ymin=-1, ymax=1, xmin=-1, xmax=1)
l[20,]<-c(-0.9,0.1)
l[16,]<-c(0.7,-0.5)
l[46,]<-c(-0.7,-0.7)
l[8,]<-c(0.7,-0.7)
#l<-layout_in_circle(net.bg)
#l<-layout_as_star(net.bg,center=V(net)[1:3])
#l<-layout_as_bipartite(net.bg)
#l<-layout_on_grid(net.bg)
#l<-layout_on_sphere(net.bg)
#l<-layout_with_sugiyama(net.bg)
#l<-layout_with_dh(net.bg)
# Normalize them so that they are in the -1, 1 interval:
#l <- layout.norm(l, ymin=-1, ymax=1, xmin=-1, xmax=1)
gene_names_used<-as.character(gene_exact_names$gene.name[nodes_gene$id])
#gene_names_used[which(gene_names_used=="CTSD\xca")]<-"CTSD"
plot.igraph(net.bg, rescale=F, layout=l,edge.arrow.size=.1, edge.curved=.2,vertex.label=gene_names_used,
vertex.label.color="blue",vertex.label.cex=1,mark.border=NA)
}
network.learn<-function(data_observe=data_observe,
x_cov=x_cov,
X_big_int=X_big_int,
X_big_int_cov=X_big_int_cov,
agent=agent,
degree=3,
len.knots=3,
cv=TRUE,
nfolds=20,
alpha=1)
{
t<-agent
cluster<-ncol(data_observe)
#X_big<-apply(X_big,2,function(x) x/sum(x))
#X_big_int<-apply(X_big_int,2,function(x) x/sum(x))
num_cov<-degree+len.knots
#X_big_int_exp_intcep<-cbind(1,t,X_big_int,x_cov)
#some setup for final analysis
X_big_int_exp<-cbind(t,X_big_int,x_cov*X_big_int_cov,t*x_cov,x_cov)
X_big_int_exp_intcep<-cbind(1,t,X_big_int,x_cov*X_big_int_cov,t*x_cov,x_cov)
X_big_int_exp_intcep_0<-cbind(1,t,X_big_int,0*X_big_int_cov,t*0,0)
X_big_int_exp_intcep_1<-cbind(1,t,X_big_int,1*X_big_int_cov,t*1,1)
x_cov<-matrix(x_cov,ncol=1)
group<-c(0,rep(1:(2*ncol(data_observe)),each=num_cov),rep(0,ncol(x_cov)),rep(0,ncol(x_cov)))
self_size<-rep()
self_size_cov<-rep()
self_size_all<-rep()
gene_whole<-rep()
gene_whole_cov<-rep()
gene_whole_all<-rep()
fitted_1_all<-rep()
fitted_0_all<-rep()
smoking_effect_all<-rep()
trend_base_all<-rep()
trend_smoking_effect_all<-rep()
for (j in 1:ncol(data_observe))  #
{
#cvfit <- cv.grpreg(X_big_int_exp, data_observe[,j], group=group, penalty="grLasso",nfolds=5,alpha=alpha1)
#beta_ini<-grpreg(X_big_int_exp, data_observe[,j], group=group, penalty="grLasso",lambda = cvfit$lambda.min,alpha=alpha1)$beta
#group_id<-c(1,2,rep(3:(2+ncol(data_observe)),each=num_cov))
#beta_each_g<-unlist(tapply(beta_ini,group_id,function(x) x))
#weight_ini<-rep()
#for(i in 1:ncol(data_observe))
#{
#  m<-sum((beta_each_g[(3+(i-1)*num_cov):(3+(i-1)*num_cov+num_cov-1)])^2)
#  weight_ini<-c(weight_ini,m)
#}
#weight<-(1/(weight_ini+0.0000001))^0.3
cvfit <- cv.grpreg(X_big_int_exp, data_observe[,j], group=group, penalty="grLasso",nfolds=nfolds,alpha=alpha,max.iter=100000,seed=23556)
fit<-grpreg(X_big_int_exp, data_observe[,j], group=group, penalty="grLasso",lambda =cvfit$lambda.min,alpha=alpha,max.iter=100000)
#beta_group<-fit$beta
#fit<-grpreg(X_big_int_exp, data_observe[,j], group=group, penalty="grLasso",alpha=alpha,lambda.min = lambda.min)
#fit<-grpreg(X_big_int_exp, data_observe[,j], group=group, penalty="grLasso",alpha=alpha,lambda = cvfit$lambda.min)
#beta_group<-select(fit,"EBIC")$beta
#cvfit <- cv.grpreg(X_big_int_exp, data_observe[,4], group=group, penalty="grLasso",nfolds=50)
#fit<-grpreg(X_big_int_exp, data_observe[,4], group=group, penalty="grLasso",lambda = cvfit$lambda.min)
#fit<-grpreg(X_big_int_exp, data_observe[,2], group=group, penalty="grLasso")
#beta_group<-select(fit,"EBIC")$beta
#weight
beta_select<-fit$beta
index_nonzero<-which(beta_select!=0)
beta_select[index_nonzero]
find_index<-index_nonzero[-c(1:2,length(index_nonzero)-1,length(index_nonzero))]-2
find_index_comb<-unique(ifelse(find_index>num_cov*cluster,find_index-num_cov*cluster,find_index))
#influ<-find_index[ which(find_index%%num_cov==0)]/num_cov
#m<-which(influ==j)
#if (length(m)==0)
#{
fitted<-X_big_int_exp_intcep[,c(index_nonzero)]%*%beta_select[index_nonzero]
fitted_1<-X_big_int_exp_intcep_1[,c(index_nonzero)]%*%beta_select[index_nonzero]
fitted_0<-X_big_int_exp_intcep_0[,c(index_nonzero)]%*%beta_select[index_nonzero]
fitted_1_all<-cbind(fitted_1_all,fitted_1)
fitted_0_all<-cbind(fitted_0_all,fitted_0)
fitted_self<-X_big_int_exp_intcep[,1:2]%*%beta_select[1:2]
fitted_self<-t(fitted_self)
self_size<-rbind(self_size,fitted_self)
smoking_effect<-(X_big_int_exp_intcep_1[,ncol(X_big_int_exp_intcep_1)]*beta_select[ncol(X_big_int_exp_intcep_1)])[1]
smoking_effect_all<-c(smoking_effect_all,smoking_effect)
trend_base<-X_big_int_exp_intcep_0[,2]*beta_select[2]
trend_base_all<-cbind(trend_base_all,trend_base)
trend_smoking_effect<-X_big_int_exp_intcep_1[,ncol(X_big_int_exp_intcep_1)-1]*beta_select[ncol(X_big_int_exp_intcep_1)-1]
trend_smoking_effect_all<-cbind(trend_smoking_effect_all,trend_smoking_effect)
fitted_self_cov<-X_big_int_exp_intcep_1[,c(length(beta_select)-1,length(beta_select))]%*%beta_select[c(length(beta_select)-1,length(beta_select))]
fitted_self_cov<-t(fitted_self_cov)
self_size_cov<-rbind(self_size_cov,fitted_self_cov)
fitted_self_all<-X_big_int_exp_intcep_1[,c(1,2,length(beta_select)-1,length(beta_select))]%*%beta_select[c(1,2,length(beta_select)-1,length(beta_select))]
fitted_self_all<-t(fitted_self_all)
self_size_all<-rbind(self_size_all,fitted_self_all)
#}
#else
#{
#  fitted<-X_big_int_exp_intcep[,c(index_nonzero)]%*%beta_select[index_nonzero]
#  fitted_self<-X_big_int_exp_intcep[,c(1:2,(2+(j-1)*num_cov+1):(2+(j-1)*num_cov+num_cov))]%*%beta_select[c(1:2,(2+(j-1)*num_cov+1):(2+(j-1)*num_cov+num_cov))]
#  fitted_self<-t(fitted_self)
#  self_size<-rbind(self_size,fitted_self)
#  find_self<-which(influ==j)
#  find_index<-find_index[-c((num_cov*(find_self-1)+1):(num_cov*(find_self-1)+num_cov))]
#}
par(mfrow = c(1, 1))
gene_index<-j
plot(x=t,y=data_observe[,gene_index],ylim=c(-1,max(data_observe[,gene_index])+0.2))
lines(x=t,y=fitted_self,col="black")
lines(x=t,y=fitted,col="red")
num_gene<-length(find_index)/num_cov
num_gene_comb<-length(find_index_comb)/num_cov
gene_cluster<-rep()
gene_cluster_cov<-rep()
gene_cluster_all<-rep()
fitted_gene_matrix<-rep()
fitted_gene_matrix_cov<-rep()
fitted_gene_matrix_all<-rep()
if (num_gene>0)
{
for (i in 1:num_gene)
{
gene_relate<-find_index[(i-1)*num_cov+1]%/%num_cov+1
if (gene_relate<=ncol(data_observe))
{
gene_cluster<-c(gene_cluster,gene_relate)
fitted_gene<-X_big_int_exp_intcep[,index_nonzero[(3+(i-1)*num_cov):(3+i*num_cov-1)]]%*%beta_select[index_nonzero[(3+(i-1)*num_cov):(3+i*num_cov-1)]]
fitted_gene_matrix<-cbind(fitted_gene_matrix,fitted_gene)
lines(x=t,y=fitted_gene,ylab="y",col=i+2)
}else
{
gene_cluster_cov<-c(gene_cluster_cov,gene_relate)
fitted_gene_cov<-X_big_int_exp_intcep_1[,index_nonzero[(3+(i-1)*num_cov):(3+i*num_cov-1)]]%*%beta_select[index_nonzero[(3+(i-1)*num_cov):(3+i*num_cov-1)]]
fitted_gene_matrix_cov<-cbind(fitted_gene_matrix_cov,fitted_gene_cov)
lines(x=t,y=fitted_gene_cov,ylab="y",col=i+2)
}
}
if(!is.null(fitted_gene_matrix))
{
gene_cluster<-cbind(gene_cluster,j,t(fitted_gene_matrix))
gene_whole<-rbind(gene_whole,gene_cluster)
}
if(!is.null(fitted_gene_matrix_cov))
{
gene_cluster_cov<-cbind(gene_cluster_cov,j,t(fitted_gene_matrix_cov))
gene_whole_cov<-rbind(gene_whole_cov,gene_cluster_cov)
}
for (i in 1:num_gene_comb)
{
gene_relate_comb<-find_index_comb[(i-1)*num_cov+1]%/%num_cov+1
gene_cluster_all<-c(gene_cluster_all,gene_relate_comb)
fitted_gene_all<-X_big_int_exp_intcep_1[,c(find_index_comb[(1+(i-1)*num_cov):(1+i*num_cov-1)]+2,find_index_comb[(1+(i-1)*num_cov):(1+i*num_cov-1)]+2+cluster*num_cov)]%*%beta_select[c(find_index_comb[(1+(i-1)*num_cov):(1+i*num_cov-1)]+2,find_index_comb[(1+(i-1)*num_cov):(1+i*num_cov-1)]+2+cluster*num_cov)]
fitted_gene_matrix_all<-cbind(fitted_gene_matrix_all,fitted_gene_all)
}
gene_cluster_all<-cbind(gene_cluster_all,j,t(fitted_gene_matrix_all))
gene_whole_all<-rbind(gene_whole_all,gene_cluster_all)
}
print(j)
###capture the beta_cov and overall
}
self_size<-cbind(rep(1:cluster),self_size)
#dim(self_size)
self_size_cov<-cbind(rep(1:cluster),self_size_cov)
#dim(self_size_cov)
self_size_all<-cbind(rep(1:cluster),self_size_all)
#dim(self_size_all)
gene_whole_cov[,1]<-gene_whole_cov[,1]-ncol(data_observe)
return(list(self_size=self_size,
self_size_cov=self_size_cov,
self_size_all=self_size_all,
gene_whole_cov=gene_whole_cov,
gene_whole_all=gene_whole_all,
gene_whole=gene_whole))
}
network.output<-network.learn(data_observe=data_observe,
x_cov=x_cov,
X_big_int=X_big_int,
X_big_int_cov=X_big_int_cov,
agent=agent,
degree=3,
len.knots=3,
cv=TRUE,
nfolds=20,
alpha=1)
summary(network.output$gene_whole_cov[10,])
data.list.t3<-list(data_observe=data_observe,
x_cov=x_cov,
agent=agent)
saveRDS(network.output, file = "network.output.rds")
saveRDS(data.list.t3, file = "data.list.t3.rds")
library(igraph)
##need data
network.output<-readRDS(file = "network.output.rds")
data.list.t3<-readRDS(file = "data.list.t3.rds")
gene_exact_names<-read.csv(file="85_gene_name_information.csv")
data_observe<-data.list.t3$data_observe
x_cov<-data.list.t3$x_cov
agent<-data.list.t3$agent
self_size<-network.output$self_size
self_size_cov<-network.output$self_size_cov
self_size_all<-network.output$self_size_all
gene_whole_cov<-network.output$gene_whole_cov
gene_whole_all<-network.output$gene_whole_all
gene_whole<-network.output$gene_whole
##network for x=0 at i=250 after some tuning
par(mfrow = c(1, 1))
par(cex=1)
par(mar = c(0, 0, 0, 0), oma = c(6, 6, 3, 3))
tunned_value<-0.03
for (i in c(250))
{
tunning_index<-apply(gene_whole_all,1,function (x) ifelse((abs(x[i+2]))>=tunned_value,1,0))
gene_whole_all_tuned<-gene_whole_all[which(tunning_index==1),]
tunning_index<-apply(gene_whole,1,function (x) ifelse((abs(x[i+2]))>=tunned_value,1,0))
gene_whole_tuned<-gene_whole[which(tunning_index==1),]
dim(gene_whole_tuned)
unique(gene_whole_tuned[,2])
table(gene_whole_tuned[,2])
#geneate link data with 25th tissue
links_gene<-gene_whole_tuned[,c(1,2,i+2)]
colnames(links_gene)<-c("from","to","tissue_name")
links_gene<-as.data.frame(links_gene)
links_gene$edge_type<-ifelse(gene_whole_tuned[,i+2]>0,1,2)
rownames(links_gene)<-rep(1:nrow(links_gene))
self_index_all<-unique(c(gene_whole_all_tuned[,1],gene_whole_all_tuned[,2],gene_whole_tuned[,1],gene_whole_tuned[,2]))
self_index<-unique(c(gene_whole_tuned[,1],gene_whole_tuned[,2]))
#nodes_gene<-data.frame(cbind(self_index,self_size[self_index,(i+1)]))
nodes_gene<-data.frame(self_size[self_size[,1] %in% self_index,c(1,(i+1))])
colnames(nodes_gene)<-c("id","self_weight")
#nodes_gene<-data.frame(self_size[,c((i+1))])
#colnames(nodes_gene)<-c("self_weight")
nodes_gene$node_type<-ifelse(nodes_gene$id %in% c(39,40,48,64,76),1, ifelse(nodes_gene$id %in% (self_index),2,3))
#nodes_gene$node_type<-ifelse(nodes_gene$id %in% self_index,3,4)
net <- graph.data.frame(links_gene, nodes_gene, directed=T)
class(net)
net
# It's easy to access nodes, edges, and their attributes:
E(net)
V(net)$self_weight
E(net)$tissue_name
V(net) #total 47 clusters included in the network
# Now we should be able to do this:
#plot(net, edge.arrow.size=.2,vertex.label.family="Arial Black" )
#adjust size of nodes and width of edges
colrs_nodes <- c("red","orange","gray")
V(net)$color <- colrs_nodes[V(net)$node_type]
colrs_edge<-c("tomato","gray40")
E(net)$color <- colrs_edge[E(net)$edge_type]
V(net)$size <- (V(net)$self_weight)^0.7*4
E(net)$width <- (abs(E(net)$tissue_name))^0.4*7
#change coordinate to separate the nodes
#set.seed(41414343)
net.bg<-net
set.seed(4151320)
l<-layout_nicely(net.bg)
l <- layout.norm(l, ymin=-1, ymax=1, xmin=-1, xmax=1)
l[20,]<-c(-0.9,0.1)
l[16,]<-c(0.7,-0.5)
l[46,]<-c(-0.7,-0.7)
l[8,]<-c(0.7,-0.7)
#l<-layout_in_circle(net.bg)
#l<-layout_as_star(net.bg,center=V(net)[1:3])
#l<-layout_as_bipartite(net.bg)
#l<-layout_on_grid(net.bg)
#l<-layout_on_sphere(net.bg)
#l<-layout_with_sugiyama(net.bg)
#l<-layout_with_dh(net.bg)
# Normalize them so that they are in the -1, 1 interval:
#l <- layout.norm(l, ymin=-1, ymax=1, xmin=-1, xmax=1)
gene_names_used<-as.character(gene_exact_names$gene.name[nodes_gene$id])
#gene_names_used[which(gene_names_used=="CTSD\xca")]<-"CTSD"
plot.igraph(net.bg, rescale=F, layout=l,edge.arrow.size=.1, edge.curved=.2,vertex.label=gene_names_used,
vertex.label.color="blue",vertex.label.cex=1,mark.border=NA)
}
##network for x=0 at i=250 after some tuning
par(mfrow = c(1, 1))
par(cex=1)
par(mar = c(0, 0, 0, 0), oma = c(6, 6, 3, 3))
tunned_value<-0.03
for (i in c(250))
{
tunning_index<-apply(gene_whole_all,1,function (x) ifelse((abs(x[i+2]))>=tunned_value,1,0))
gene_whole_all_tuned<-gene_whole_all[which(tunning_index==1),]
tunning_index<-apply(gene_whole,1,function (x) ifelse((abs(x[i+2]))>=tunned_value,1,0))
gene_whole_tuned<-gene_whole[which(tunning_index==1),]
dim(gene_whole_tuned)
unique(gene_whole_tuned[,2])
table(gene_whole_tuned[,2])
#geneate link data with 25th tissue
links_gene<-gene_whole_tuned[,c(1,2,i+2)]
colnames(links_gene)<-c("from","to","tissue_name")
links_gene<-as.data.frame(links_gene)
links_gene$edge_type<-ifelse(gene_whole_tuned[,i+2]>0,1,2)
rownames(links_gene)<-rep(1:nrow(links_gene))
self_index_all<-unique(c(gene_whole_all_tuned[,1],gene_whole_all_tuned[,2],gene_whole_tuned[,1],gene_whole_tuned[,2]))
self_index<-unique(c(gene_whole_tuned[,1],gene_whole_tuned[,2]))
#nodes_gene<-data.frame(cbind(self_index,self_size[self_index,(i+1)]))
nodes_gene<-data.frame(self_size[self_size[,1] %in% self_index,c(1,(i+1))])
colnames(nodes_gene)<-c("id","self_weight")
#nodes_gene<-data.frame(self_size[,c((i+1))])
#colnames(nodes_gene)<-c("self_weight")
nodes_gene$node_type<-ifelse(nodes_gene$id %in% c(39,40,48,64,76),1, ifelse(nodes_gene$id %in% (self_index),2,3))
#nodes_gene$node_type<-ifelse(nodes_gene$id %in% self_index,3,4)
net <- graph.data.frame(links_gene, nodes_gene, directed=T)
class(net)
net
# It's easy to access nodes, edges, and their attributes:
E(net)
V(net)$self_weight
E(net)$tissue_name
V(net) #total 47 clusters included in the network
# Now we should be able to do this:
#plot(net, edge.arrow.size=.2,vertex.label.family="Arial Black" )
#adjust size of nodes and width of edges
colrs_nodes <- c("red","orange","gray")
V(net)$color <- colrs_nodes[V(net)$node_type]
colrs_edge<-c("tomato","gray40")
E(net)$color <- colrs_edge[E(net)$edge_type]
V(net)$size <- (V(net)$self_weight)^0.7*4
E(net)$width <- (abs(E(net)$tissue_name))^0.4*7
#change coordinate to separate the nodes
#set.seed(41414343)
net.bg<-net
set.seed(4151320)
l<-layout_nicely(net.bg)
l <- layout.norm(l, ymin=-1, ymax=1, xmin=-1, xmax=1)
l[20,]<-c(-0.9,0.1)
l[16,]<-c(0.7,-0.5)
l[46,]<-c(-0.7,-0.7)
l[8,]<-c(0.7,-0.7)
#l<-layout_in_circle(net.bg)
#l<-layout_as_star(net.bg,center=V(net)[1:3])
#l<-layout_as_bipartite(net.bg)
#l<-layout_on_grid(net.bg)
#l<-layout_on_sphere(net.bg)
#l<-layout_with_sugiyama(net.bg)
#l<-layout_with_dh(net.bg)
# Normalize them so that they are in the -1, 1 interval:
#l <- layout.norm(l, ymin=-1, ymax=1, xmin=-1, xmax=1)
gene_names_used<-as.character(gene_exact_names$gene.name[nodes_gene$id])
#gene_names_used[which(gene_names_used=="CTSD\xca")]<-"CTSD"
plot.igraph(net.bg, rescale=F, layout=l,edge.arrow.size=.1, edge.curved=.2,vertex.label=gene_names_used,
vertex.label.color="blue",vertex.label.cex=0.7,mark.border=NA)
}
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
usethis::use_pkgdown()
pkgdown::build_site()
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_home_index()
pkgdown::init_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
build_home_index(); init_site()
build_home_index()
pkgdown::build_home_index()
pkgdown::init_site()
pkgdown::build_home_index()
pkgdown::init_site()
pkgdown::build_home_index()
pkgdown::init_site()
pkgdown::build_home_index()
pkgdown::init_site()
pkgdown::build_home_index()
pkgdown::init_site()
pkgdown::build_home_index()
pkgdown::init_site()
pkgdown::build_home_index()
pkgdown::init_site()
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown()
usethis::use_pkgdown()
pkgdown::build_home_index()
pkgdown::init_site()
pkgdown::build_home_index()
pkgdown::init_site()
pkgdown::build_home_index()
pkgdown::init_site()
pkgdown::build_site()
pkgdown::build_home_index()
pkgdown::build_home_index()
pkgdown::build_home_index()
pkgdown::build_site()
pkgdown::build_home_index()
pkgdown::init_site()
pkgdown::build_home_index()
pkgdown::init_site()
pkgdown::build_home_index()
pkgdown::build_home_index()
pkgdown::build_home_index()
pkgdown::build_home_index()
pkgdown::build_home_index()
pkgdown::build_home_index()
pkgdown::build_home_index()
pkgdown::init_site()
pkgdown::build_home_index()
pkgdown::build_home_index()
pkgdown::init_site()
pkgdown::build_home_index()
pkgdown::init_site()
pkgdown::build_home_index()
pkgdown::init_site()
pkgdown::build_home_index()
pkgdown::init_site()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
